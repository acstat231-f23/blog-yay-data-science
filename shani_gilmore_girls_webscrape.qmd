
```{r}
#| label: setup
#| include: FALSE

knitr::opts_chunk$set(eval = FALSE, message = FALSE)

# improve digit and NA display 
options(scipen = 1, knitr.kable.NA = '')


#Loading in Necessary libraries
library(tidyverse)
library(rvest)
library(robotstxt)
library(purrr)
library(stringr)
library(dplyr)
library(tidytext)
library(RColorBrewer)
library(kableExtra)
```

#Loading in the episode links, titles, season into a dataframe called gg_eps
```{r}
#|eval: false

#testing
gilmore_girls <- "https://scriptmochi.com/tv-series/gilmore-girls"

#Allowed!!!
robotstxt::paths_allowed(gilmore_girls)

#test to get an episode
ep_links <- gilmore_girls |>         
  read_html() |>
  html_elements(".chapter__link")|>
  html_attr("href")

num <- c(1:157)

#All episode links, numbered, with correct URL
num_ep_links <- cbind(num, ep_links)|>
  as.data.frame()

num_ep_links$ep_links <- paste("https://scriptmochi.com/", num_ep_links$ep_links, sep="")

#adding which season as a variable
num_ep_links <- num_ep_links |>
  mutate(season = 
           case_when(
            as.integer(num)>=1 & as.integer(num)<=21 ~ 1,
            as.integer(num)>=22 & as.integer(num)<=43 ~ 2,
            as.integer(num)>=44 & as.integer(num)<=65 ~ 3,
            as.integer(num)>=66 & as.integer(num)<=87 ~ 4,
            as.integer(num)>=88 & as.integer(num)<=109 ~ 5,
            as.integer(num)>=110 & as.integer(num)<=131 ~ 6,
            as.integer(num)>=132 & as.integer(num)<=153 ~ 7,
            as.integer(num)>=154 & as.integer(num)<=157 ~ 8)) 

#Getting episode titles
titles <- gilmore_girls |>         
  read_html() |>
  html_elements("a")|>
  html_text() |>
  as.data.frame() |>
  slice(12:168)|>
  rename(title = `html_text(html_elements(read_html(gilmore_girls), "a"))`)|>
  #TO RENAME COLUMN DO THIS colnames(dataframe) = c("name")
  mutate(title = str_replace(title,"- ", ""))|>
  mutate(title = str_replace(title,"[0-9]+", ""))

#joining episode links with the titles
gg_eps <- cbind(num_ep_links, titles)

```
#Reading the text of each episode into another column, starting with just the pilot to test
```{r}
#testing with pilot
pilot_url <- "https://scriptmochi.com/tv-series/gilmore-girls/the-pilot-1149"  

pilot_text <- pilot_url |>
  read_html() |>
  html_elements(".content") |>
  html_text2() 


# Pre-allocate new column in dataframe for episode text
gg_with_text <- gg_eps |>
  mutate(text = "") 

# Iterate through links
for (i in 1:157) {
   
  skip_to_next <- FALSE
  
  tryCatch(
    error = function(cnd) {
      skip_to_next <- TRUE
    },
 
    if (skip_to_next) { next }  
    else {
         #Scrape episode i's text and save it to row i of the `text` variable
        gg_with_text$text[i] <- 
        gg_eps$ep_links[i]|>
        read_html() |>
        html_elements(".content") |>
        html_text2()   
    }
  )
  
#Confirm bots are allowed to access the page 
robotstxt::paths_allowed(gg_eps$ep_links[i])
}

#saving workspace and rds for future use!
save(gg_with_text, file="gg_with_text1.Rdata")
saveRDS(gg_with_text, file="gg_with_text_data.rds")

```


```{r}
#loading rds and workspace
gg_with_text_reloaded <- readRDS(file = "gg_with_text_data.rds")
load(file="gg_with_text1.Rdata")


#Separating by line
gg_by_characters <- gg_with_text |>
  unnest_tokens(token = "lines", output = sentence, input = text) |>

#separating character from line and then dropping the non character speaking lines
#like stage directions or introductory episode information
gg_by_characters <- gg_by_characters|>
  separate(sentence, c("character", "line"), sep = ":")|>
  drop_na()

#Single words
gg_by_word <- gg_by_characters|>
  unnest_tokens(output = word, input = line)

#bigrams - do not end up using this
gg_bigrams <- gg_by_characters |>
  unnest_tokens(output = bigram, input = line, token = "ngrams", n = 2)

#threegrams - use this and seems rather irrelevant
gg_threegrams <- gg_by_characters |>
  unnest_tokens(output = threegram, input = line, token = "ngrams", n = 3)

```

```{r}
#remove the stop words!
data(stop_words)

#make a custom stop words list for names and filler words
custom_stop_words <- data.frame(
  word = c("yeah",
           "gonna",
           "hey",
           "uh",
           "um",
           "huh",
           "lot",
           "ah",
           "bye",
           "wow",
           "lorelai",
           "luke",
           "michel",
           "rory",
           "paris",
           "sookie",
           "emily",
           "kirk",
           "richard",
           "dean",
           "taylor",
           "jess",
           "logan",
           "lane",
           "wanna",
           "jackson",
           "liz"
           ),
  lexicon = rep("custom", length(word))
)

 stop_words_full <- bind_rows(stop_words, custom_stop_words)

 stop_words_full |>
   count(lexicon) 

gg_filtered <- gg_by_word |>
  anti_join(stop_words_full, by="word")

#saving workspace
save(gg_filtered, file="gg_filtered.Rdata")
```
```{r}
#Gilmore Girls Most Common Words Visualization - Shani

#Customizing color palette
nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(8, "Set2"))(nb.cols)

#plotting with palette for top 20 words by count 
#excluding stop words and keeping words without the positivity ranking
gg_filtered|>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  #fct_reorder to descending order it
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for Gilmore Girls (Excl. Stop Words)") +
  scale_fill_manual(values = mycolors) +
  theme_light()
```
```{r}
#Gilmore Girls Most Common Words by Character Visualization - Shani

#finding top 5 characters
top_5_chars <- gg_filtered |>
  count(character, sort = TRUE)|>
  slice(1:5) |>
  select(character)

#making into vector
char_names <- str_to_title(top_5_chars[["character"]])

#color palette
nb.cols <- 65
mycolors <- colorRampPalette(brewer.pal(8, "Pastel1"))(nb.cols)

#plotting by character with color palette
gg_filtered|>
  filter(str_to_title(character) %in% char_names)|>
  group_by(character)|>
  count(word, sort = TRUE) |>
  slice(1:15) |>
  mutate(word = reorder_within(word, n, character))|>
  ggplot(aes(x = word, 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  scale_x_reordered()+
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = paste("Most Common Words said by the Top 5 Characters for Gilmore Girls (Excl. Stop Words)")) +
    facet_wrap(facets = ~reorder(str_to_title(character), -n), scales = "free_y") +
  scale_fill_manual(values = mycolors) +
  theme_light()
```
```{r}
#Table on top 5 characters, code from daniel

filtered <- c(sum(gg_filtered$character == "lorelai"),
              sum(gg_filtered$character == "rory"),
              sum(gg_filtered$character == "luke"),
              sum(gg_filtered$character == "emily"),
              sum(gg_filtered$character == "sookie"))

unfiltered <- c(sum(gg_by_word$character == "lorelai"),
              sum(gg_by_word$character == "rory"),
              sum(gg_by_word$character == "luke"),
              sum(gg_by_word$character == "emily"),
              sum(gg_by_word$character == "sookie"))

gg_character_data <- data.frame(char_names, filtered, unfiltered)
  
gg_character_data <- gg_character_data |>
  mutate(filtered_percent = 100*(filtered / as.integer(count(gg_filtered)))) |>
  mutate(unfiltered_percent = 100*(unfiltered / as.integer(count(gg_by_word))))


save(gg_character_data, file="gg_character_data.Rdata")
load(file="gg_character_data.Rdata")


gg_character_data |>
  kable(booktabs = TRUE, digits = 2, col.names = c(
    "Character",
    "Filtered Words",
    "Unfiltered Words",
    "% of all Filtered words",
    "% of all Unfiltered words"
  )) |>
  kable_styling()
```

```{r}
gg_filtered_pos_neg |>
  filter(str_to_title(character) %in% char_names) |>
  group_by(str_to_title(character)) |>
  summarize(mean = mean(value, na.rm = TRUE)) |>
  arrange(factor(`str_to_title(character)`, levels = gg_character_data$char_names))|>
  kable(booktabs = TRUE, digits = 3, col.names = c(
    "Character",
    "Overall Mean of Sentiment Throughout the show"
  )) |>
  kable_styling()
```


```{r}
#Gilmore Girls Most Common Threegrams Visualization - Shani

gg_threegrams |>
  count(threegram, sort = TRUE) |>
  #1 is NA so slicing with first being 2
  slice(2:22) |>
  ggplot(aes(x = fct_reorder(threegram, n), 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Threegrams for Gilmore Girls") +
  scale_fill_manual(values = mycolors) +
  theme_light()
```

```{r}
#Getting sentiments (values and categories) for the words in Gilmore Girls

#sentiments (positive and negative)
pos_neg_val_sentiment <- get_sentiments("afinn") #from tidyverse
save(pos_neg_val_sentiment, file="pos_neg_val_sentiment.Rdata")

#then mutate filtered words with the pos/neg values associated with the words
gg_filtered_pos_neg <- inner_join(gg_filtered, 
                                          pos_neg_val_sentiment, 
                                          by="word")
save(gg_filtered_pos_neg, file="gg_filtered_pos_neg.Rdata")


#With descriptive/categorical sentiments (angry, trust, joy, etc)
word_sentiment <- get_sentiments("nrc") 
gg_filtered_sentiments <- inner_join(gg_filtered, 
                                          word_sentiment, 
                                          by="word")
save(gg_filtered_sentiments, file="gg_filtered_sentiments.Rdata")
```

```{r} 
#Gilmore Girls Filtered Most Common Words with Sentiment Visualization - Shani

#Most common words with sentiment (not NA in the dplyr package)
gg_filtered|>
  count(word, sort = TRUE) |>
  inner_join(pos_neg_val_sentiment, by = "word")|>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(value))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  #showing the legend with positive values at the top
  guides(fill = guide_legend(reverse = TRUE)) +
  labs(
    x = NULL,
    y = "Number of instances",
    fill = "Positivity rating",
    title = "Most Common Words with Sentiment for Gilmore Girls (Excl. Stop Words)") +
  scale_fill_brewer(palette = "RdYlGn") +
  theme_light()

```

```{r}
#Gilmore Girls Sentiment Analysis Visualization and Value - Shani

#Customizing color palette
nb.cols <- 8
mycolors <- colorRampPalette(brewer.pal(8, "Pastel1"))(nb.cols)

#and how common the 8 different categorical sentiments are (visualization)
#one word can have more than one sentiment in the dplyr dataset
gg_filtered_sentiments|>
  filter(sentiment != "positive" & sentiment != "negative")|>
  count(sentiment, sort = TRUE) |>
  slice(1:12) |> 
  ggplot(aes(x = fct_reorder(sentiment, n), 
             y = n, 
             fill = sentiment)) +
  geom_col() +
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Sentiments in Gilmore Girls") +
  scale_fill_manual(values = mycolors) +
  theme_light()

#finding the overall sentiment of the show (score) 
cat("The mean positivity value of Gilmore Girls is", mean(gg_filtered_pos_neg$value))
```

```{r}
#stacked bar plot for the different sentiments
p <- ggplot(df, aes(x = dose, y = len))+
  geom_col(aes(fill = supp), width = 0.7)
p
il <- ggplot(p11, aes(x = question, y = q.int.local))+
  geom_col(aes(fill = knowledge), width = 0.7)+ 
  coord_flip()+
  scale_fill_manual(values = c("#CA463F", "#E2CA58", "#B0D094", "#67BBD2", "#3C518F"))+
  geom_text(aes(label = q.int.local),color="white",size=2,position=position_dodge(width=0.9), hjust=-0.2)
```



