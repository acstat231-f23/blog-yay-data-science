
```{r}
#| label: setup
#| include: FALSE

knitr::opts_chunk$set(eval = FALSE, message = FALSE)

# improve digit and NA display 
options(scipen = 1, knitr.kable.NA = '')


#Loading in Necessary libraries
library(tidyverse)
library(rvest)
library(robotstxt)
library(purrr)
library(stringr)
library(dplyr)
library(tidytext)
library(RColorBrewer)
```

#Loading in the episode links, titles, season into a dataframe called gg_eps
```{r}
#|eval: false

#testing
gilmore_girls <- "https://scriptmochi.com/tv-series/gilmore-girls"

#Allowed!!!
robotstxt::paths_allowed(gilmore_girls)

#test to get an episode
ep_links <- gilmore_girls |>         
  read_html() |>
  html_elements(".chapter__link")|>
  html_attr("href")

num <- c(1:157)

#All episode links, numbered, with correct URL
num_ep_links <- cbind(num, ep_links)|>
  as.data.frame()

num_ep_links$ep_links <- paste("https://scriptmochi.com/", num_ep_links$ep_links, sep="")

#adding which season as a variable
num_ep_links <- num_ep_links |>
  mutate(season = 
           case_when(
            as.integer(num)>=1 & as.integer(num)<=21 ~ 1,
            as.integer(num)>=22 & as.integer(num)<=43 ~ 2,
            as.integer(num)>=44 & as.integer(num)<=65 ~ 3,
            as.integer(num)>=66 & as.integer(num)<=87 ~ 4,
            as.integer(num)>=88 & as.integer(num)<=109 ~ 5,
            as.integer(num)>=110 & as.integer(num)<=131 ~ 6,
            as.integer(num)>=132 & as.integer(num)<=153 ~ 7,
            as.integer(num)>=154 & as.integer(num)<=157 ~ 8)) 

#Getting episode titles
titles <- gilmore_girls |>         
  read_html() |>
  html_elements("a")|>
  html_text() |>
  as.data.frame() |>
  slice(12:168)|>
  rename(title = `html_text(html_elements(read_html(gilmore_girls), "a"))`)|>
  #TO RENAME COLUMN DO THIS colnames(dataframe) = c("name")
  mutate(title = str_replace(title,"- ", ""))|>
  mutate(title = str_replace(title,"[0-9]+", ""))

#joining episode links with the titles
gg_eps <- cbind(num_ep_links, titles)

```
#Reading the text of each episode into another column, starting with just the pilot to test
```{r}
pilot_url <- "https://scriptmochi.com/tv-series/gilmore-girls/the-pilot-1149"  

pilot_text <- pilot_url |>
  read_html() |>
  html_elements(".content") |>
  html_text2() 

#cat(pilot_text)


# Pre-allocate new column in dataframe for episode text
gg_with_text <- gg_eps |>
  mutate(text = "") 

# Iterate through links MIGHT WORK? GETS GLITCHY AT DIF TIMES AND SAYS replacement has length zero
for (i in 1:157) {
   
  skip_to_next <- FALSE
  
  tryCatch(
    error = function(cnd) {
      skip_to_next <- TRUE
    },
 
    if (skip_to_next) { next }  
    else {
         #Scrape episode i's text and save it to row i of the `text` variable
        gg_with_text$text[i] <- 
        gg_eps$ep_links[i]|>
        read_html() |>
        html_elements(".content") |>
        html_text2()   
    }
  )
  
#Confirm bots are allowed to access the page 
robotstxt::paths_allowed(gg_eps$ep_links[i])
}

save(gg_with_text, file="gg_with_text1.Rdata")
saveRDS(gg_with_text, file="gg_with_text_data.rds")

```


```{r}

gg_with_text_reloaded <- readRDS(file = "gg_with_text_data.rds")

load(file="gg_with_text1.Rdata")


#Separating by line
gg_by_characters <- gg_with_text |>
  unnest_tokens(token = "lines", output = sentence, input = text) |>

#separating character from line and then dropping the non character speaking lines
  #like stage directions or introductory episode information
gg_by_characters <- gg_by_characters|>
  separate(sentence, c("character", "line"), sep = ":")|>
  drop_na()

#Single words
gg_by_word <- gg_by_characters|>
  unnest_tokens(output = word, input = line)

#bigrams
gg_bigrams <- gg_by_characters |>
  unnest_tokens(output = bigram, input = line, token = "ngrams", n = 2)

#threegrams
gg_threegrams <- gg_by_characters |>
  unnest_tokens(output = threegram, input = line, token = "ngrams", n = 3)

```

```{r}
#remove the stop words!
data(stop_words)

custom_stop_words <- data.frame(
  word = c("yeah",
           "gonna",
           "hey",
           "uh",
           "um",
           "huh",
           "lot",
           "ah",
           "bye",
           "wow",
           "lorelai",
           "luke",
           "michel",
           "rory",
           "paris",
           "sookie",
           "emily",
           "kirk",
           "richard",
           "dean",
           "taylor",
           "jess",
           "logan",
           "lane",
           "wanna",
           "jackson",
           "liz"
           ),
  lexicon = rep("custom", length(word))
)

 stop_words_full <- bind_rows(stop_words, custom_stop_words)

 stop_words_full %>%
   count(lexicon) #add stop words here (eg. um). can remove too

gg_filtered <- gg_by_word |>
  anti_join(stop_words_full, by="word")

save(gg_filtered, file="gg_filtered.Rdata")
```

```{r}
gg_filtered |>
  count(word, sort = TRUE) |>
  slice(1:30) |>
  # fct_reorder is used to re-order the axis (displaying the word) 
  # by values of n (the number of times that word was used)
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             color = word, 
             fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for Gilmore Girls (Excl. Stop Words)") 
 # scale_color_brewer("Diamond\nclarity")
```
```{r}

top_5_chars <- gg_filtered |>
  count(character, sort = TRUE)|>
  slice(1:5) |>
  select(character)

char_names <- top_5_chars[["character"]]

for(i in char_names){
print(gg_filtered|>
  filter(character == i)|>
  group_by(character)|>
  count(word, sort = TRUE) |>
  slice(1:30) |>
  # fct_reorder is used to re-order the axis (displaying the word) 
  # by values of n (the number of times that word was used)
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             color = word, 
             fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = paste("Most Common Words said by", i, "for Gilmore Girls (Excl. Stop Words)"))
)
}
 # scale_color_brewer("Diamond\nclarity"

```

```{r}
gg_threegrams |>
  count(threegram, sort = TRUE) |>
  slice(2:36) |> #NA for 1, annoying
  ggplot(aes(x = fct_reorder(threegram, n), 
             y = n, 
             color = threegram, 
             fill = threegram)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common threegram for Gilmore Girls")
```

```{r}
#sentiments (positive and negative) color coded (graph above)
pos_neg_val_sentiment <- get_sentiments("afinn") #from tidyverse

#then mutate filtered words with the pos/neg sentiments associated with the words
gg_filtered_pos_neg <- inner_join(gg_filtered, 
                                          pos_neg_val_sentiment, 
                                          by="word")
######WHAT IS FULL JOIN THEN FILTERING VS INNER JOIN LIKE WHAT

#now we can do something similar with descriptive sentiments (eg. hell feels angry)
word_sentiment <- get_sentiments("nrc") 
gg_filtered_sentiments <- inner_join(gg_filtered, 
                                          word_sentiment, 
                                          by="word")
save(gg_filtered_sentiments, file="gg_filtered_sentiments.Rdata")

```

```{r}
#ANALYSIS 1

#in these quick analyses, find the overall sentiment of the show (score) and the most frequent words that come up when describing the words used in the show (word_sentiment). One word can have more than one sentiment

gg_filtered_sentiments|>
  count(sentiment, sort = TRUE) |>
  slice(1:10) |> #NA for 1, annoying
  ggplot(aes(x = fct_reorder(sentiment, n), 
             y = n, 
             color = sentiment, #maybe important... bad words red, good words green?
             fill = sentiment)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Sentiments in Gilmore Girls")

mean(gg_filtered_pos_neg$value)
```




