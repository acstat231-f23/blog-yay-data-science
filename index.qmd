---
title: "Sentiment Comparison Between Popular TV Shows"
author: "Shani Getz, Yvan Grinspan, Daniel Jang"
date: "12/6/2023"
format:
  html:
    theme: minty
    toc: true
---

```{r}
#| label: setup
#| include: false

# Set code chunk defaults 
# Consider adding `message = FALSE` option
knitr::opts_chunk$set(echo = FALSE) 
                      
# Set R environment options
options(knitr.kable.NA = '')

# Load packages
library(tidyverse)
library(rvest)
library(robotstxt)
library(purrr)
library(stringr)
library(dplyr)
library(tidytext)
library(RColorBrewer)
library(kableExtra)
```

# Intro

What makes a TV show popular? While that is a multifaceted question with no straightforward answer, we want to find similarities and differences between three vastly different and very successful TV shows (Gilmore Girls, Euphoria, South Park) to see what makes them so popular. To look into the why, we have done text and sentiment analysis of the scripts of these shows and contextualized these analyses with our own interpretations as to why these words and general sentiments might resonate with viewers. Having seen these shows, we are able to confirm whether the analyses accurately depict the essence and topics of the series. First, we had to webscrape these scripts and then we cleaned up the scripts and removed the stop words. We then performed the analyses to reach a conclusion about how and why such disparate TV shows are so appealing to the general public.

# Content

You can include text, `code`, and output as usual. Remember to take full advantage of Markdown and its [syntax shortcuts](https://www.markdownguide.org/basic-syntax/).

```{r}
#Gilmore Girls
load(file="gg_filtered.Rdata")
load(file="gg_filtered_sentiments.Rdata")
load(file="gg_filtered_pos_neg.Rdata")
load(file="pos_neg_val_sentiment.Rdata")
#Euphoria
load(file = "euph_words.Rdata")
#South Park
load(file="sp_lines_filtered.Rdata")
load(file="sp_lines_full_ngram.Rdata")
load(file="sp_lines_filtered_pos_neg.Rdata")
load(file="sp_lines_filtered_sentiments.Rdata")
load(file="sp_characters.Rdata")
```


##Summaries of Each Show
IN EACH SECTION PUT 2-3 SENTENCES ABOUT EACH SHOW LIKE INFO ABOUT WHEN IT WAS MADE, SUMMARIES, HOW MANY SEASONS/EPISODES

###Gilmore Girls
Gilmore girls is a ____

###Euphoria
Euphoria is a ____

###South Park
South Park is a sitcom infamous for its exploration on offensive and controversial topics in a satirical fashion. The show centers around four fourth-graders ((Eric) Cartman, Kyle, Stan, Kenny) and their adventures. (ADD REASON WHY IT'S POPULAR) 


## Faceting Formatting of Most Common Words

<!-- Begin columns environment -->
:::::: {style="display: flex; font-size: large;"}

<!-- Create a column -->
::: {}
### Gilmore Girls

```{r}
#| label: faceted Most Common Words in Gilmore Girls
#| fig.align: left
#| out.width: 100%
#Gilmore Girls Most Common Words Visualization - Shani

#Customizing color palette
nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(8, "Pastel1"))(nb.cols)

#plotting with palette for top 20 words by count 
#excluding stop words and keeping words without the positivity ranking
gg_filtered|>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  #fct_reorder to descending order it
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for Gilmore Girls (Excl. Stop Words)") +
  scale_fill_manual(values = mycolors) +
  theme_light()
```
:::

<!-- Create another column (this one is just adding horizontal space to separate content) -->
::: {}
<div class="horizontalgap" style="width:40px"></div>
:::

<!-- Create another column -->
::: {}

### Euphoria

```{r}
#| label: faceted Most Common Words in Euphoria
#| fig.align: left
#| out.width: 100%

nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(9, "BuPu"))(nb.cols)

euph_words |>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said in Euphoria (Excl Stop Words)") +
  scale_fill_manual(values = mycolors) +
  theme_classic()
```

:::

::: {}
<div class="horizontalgap" style="width:40px"></div>
:::

::: {}
### South Park 

```{r}
#| label: faceted Most Common Words in South Park
#| fig.align: left
#| out.width: 100%

nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(6, "Set1"))(nb.cols)

sp_lines_filtered |>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n,
             fill = as.factor(n))) +
  geom_col() +
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for South Park (Excl. Stop Words)") +
  scale_fill_manual(values = mycolors) + 
  theme_light()
```

:::

::::::
<!-- End columns environment with matching length indicator-->



## Most Common Words
EXPLAIN THIS

### Gilmore Girls

Insert?

```{r}
#| label: Gilmore Girls Most Common Words Visualization - Shani
#| fig.align: left
#| out.width: 100%

#Customizing color palette
nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(8, "Pastel1"))(nb.cols)

#plotting with palette for top 20 words by count 
#excluding stop words and keeping words without the positivity ranking
gg_filtered|>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  #fct_reorder to descending order it
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for Gilmore Girls (Excl. Stop Words)") +
  scale_fill_manual(values = mycolors) +
  theme_light()
```

### Euphoria
```{r}
#| label: Most Common Words in Euphoria Overall
#| fig.align: left
#| out.width: 100%

euph_words |>
  #filter(char == "KAT") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said in Euphoria")
```

### South Park
```{r}
#| label: Most Common Words and 3grams in South Park
#| fig.align: left
#| out.width: 100%

sp_lines_filtered |>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             color = word, 
             fill = word)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for South Park (Excl. Stop Words)")


sp_lines_full_ngram |>
  count(threegram, sort = TRUE) |>
  slice(2:6) |> #NA for 1, annoying
  ggplot(aes(x = fct_reorder(threegram, n), 
             y = n, 
             color = threegram, 
             fill = threegram)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common ThreeGrams for South Park")
```

## By Top 5 Characters
EXPLAIN TOP 5 CHARACTERS

### Gilmore Girls
```{r}
#Gilmore Girls Most Common Words by Character Visualization - Shani

#finding top 5 characters
top_5_chars <- gg_filtered |>
  count(character, sort = TRUE)|>
  slice(1:5) |>
  select(character)

#making into vector
char_names <- str_to_title(top_5_chars[["character"]])

#color palette
nb.cols <- 65
mycolors <- colorRampPalette(brewer.pal(8, "Pastel1"))(nb.cols)

#plotting by character with color palette
gg_filtered|>
  filter(str_to_title(character) %in% char_names)|>
  group_by(character)|>
  count(word, sort = TRUE) |>
  slice(1:15) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = paste("Most Common Words said by the Top 5 Characters for Gilmore Girls (Excl. Stop Words)")) +
    facet_wrap(facets = ~reorder(str_to_title(character), -n), scales = "free_y") +
  scale_fill_manual(values = mycolors) +
  theme_light()
```

### Euphoria
```{r}
#| label: Most Common Words by the Top 5 Characters in Euphoria
#| fig.align: left
#| out.width: 100%

euph_words |>
  filter(char == "RUE") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Rue in Euphoria")

euph_words |>
  filter(char == "NATE") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Nate in Euphoria")

euph_words |>
  filter(char == "JULES") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Jules in Euphoria")

euph_words |>
  filter(char == "MADDY") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Maddy in Euphoria")

euph_words |>
  filter(char == "KAT") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Kat in Euphoria")
```

### South Park

This is a bit different as in south park, we mainly revolve around these four characters (one of them barely speaks, but has a large cultural impact). So, this analysis is a bit different

```{r}
#| label: Sentiments Based on Main Character for South Park
#| fig.align: left
#| out.width: 100%

#followed shani's code, except since kenny doesn't talk much (still main character), it's important to get him
nb.cols <- 51 #R says it needs 51, so I edited it
mycolors_sp <- colorRampPalette(brewer.pal(8, "Pastel1"))(nb.cols)


sp_main_characters <- data.frame(Character  = c("Cartman", "Kenny", "Stan", "Kyle"))
sp_char_names <- str_to_title(sp_main_characters[["Character"]])

sp_lines_filtered |>
  filter(str_to_title(Character) %in% sp_char_names) |> # to display a specific character's vocabulary
  group_by(Character) |>
  count(word, sort = TRUE) |>
  slice(1:15) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             color = word, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by the four main boys in South Park") +
  facet_wrap(facets = ~reorder(str_to_title(Character), -n), scales = "free_y") +
  scale_fill_manual(values = mycolors_sp) + 
  theme_light()
  
  
sp_lines_filtered_pos_neg %>%
  filter(str_to_title(Character) %in% sp_char_names) %>%
  group_by(Character) %>%
  summarize(mean = mean(value, na.rm = TRUE)) %>%
  kable(booktabs = TRUE, digits = 3, col.names = c(
    "Character",
    "Overall Mean of Sentiment Throughout the show"
  )) %>%
  kable_styling()

```


## Most Common Words by Sentiment 
EXPLAIN THIS!

###Gilmore Girls

```{r}
#| label: EXAMPLE OF SENTIMENT ANALYSIS IN GILMORE GIRLS
#| fig.align: left
#| out.width: 100%
#Gilmore Girls Filtered Most Common Words with Sentiment Visualization - Shani

#Most common words with sentiment (not NA in the dplyr package)
gg_filtered|>
  count(word, sort = TRUE) |>
  inner_join(pos_neg_val_sentiment, by = "word")|>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(value))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  #showing the legend with positive values at the top
  guides(fill = guide_legend(reverse = TRUE)) +
  labs(
    x = NULL,
    y = "Number of instances",
    fill = "Positivity rating",
    title = "Most Common Words with Sentiment for Gilmore Girls (Excl. Stop Words)") +
  scale_fill_brewer(palette = "RdYlGn") +
  theme_light()
```

### Euphoria
Insert

### South Park
Insert 

## Sentiment Analysis
EXPLAIN OUR SENTIMENT ANALYSIS

###Gilmore Girls
```{r}
#Gilmore Girls Sentiment Analysis Visualization and Value - Shani

#Customizing color palette
nb.cols <- 8
mycolors <- colorRampPalette(brewer.pal(8, "Pastel1"))(nb.cols)

#and how common the 8 different categorical sentiments are (visualization)
#one word can have more than one sentiment in the dplyr dataset
gg_filtered_sentiments|>
  filter(sentiment != "positive" & sentiment != "negative")|>
  count(sentiment, sort = TRUE) |>
  slice(1:12) |> 
  ggplot(aes(x = fct_reorder(sentiment, n), 
             y = n, 
             fill = sentiment)) +
  geom_col() +
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Sentiments in Gilmore Girls") +
  scale_fill_manual(values = mycolors) +
  theme_light()

#finding the overall sentiment of the show (score) 
cat("The mean positivity value of Gilmore Girls is", mean(gg_filtered_pos_neg$value))
```

### Euphoria
Insert

### South Park
```{r}
#| label: Sentiment Analysis for South Park
#| fig.align: left
#| out.width: 100%

sp_lines_filtered_sentiments|>
  count(sentiment, sort = TRUE) |>
  slice(4:11) |> #1 is NA, 2 and 3 are pos/neg (which aren't really indicative of anything)
  ggplot(aes(x = fct_reorder(sentiment, n), 
             y = n, 
             color = sentiment, #maybe important... bad words red, good words green?
             fill = sentiment)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Sentiments in South Park") +
  scale_fill_manual(values = mycolors) +
  theme_light()

cat("The mean positivity value of South Park is", mean(sp_lines_filtered_pos_neg$value, na.rm = TRUE))

sp_characters %>%
  kable(booktabs = TRUE, digits = 2, col.names = c(
    "Character",
    "Filtered Words",
    "Unfiltered Words",
    "% of all Filtered words",
    "% of all Unfiltered words"
  )) %>%
  kable_styling()

```


