---
title: "Sentiment Comparison Between Popular TV Shows"
author: "Shani Getz, Yvan Grinspan, Daniel Jang"
date: "12/6/2023"
format:
  html:
    theme: minty
    toc: true
---

```{r}
#| label: setup
#| include: false

# Set code chunk defaults 
# Consider adding `message = FALSE` option
knitr::opts_chunk$set(echo = FALSE) 
                      
# Set R environment options
options(knitr.kable.NA = '')

# Load packages
library(tidyverse)
library(rvest)
library(robotstxt)
library(purrr)
library(stringr)
library(dplyr)
library(tidytext)
library(RColorBrewer)
library(kableExtra)
```

# Intro

What makes a TV show popular? While that is a multifaceted question with no straightforward answer, we wanted to find similarities and differences between three vastly different successful TV shows (Gilmore Girls, Euphoria, South Park) to see what makes them so popular. We will be doing text and sentiment analysis, while also giving our own interpretations (as we have seen these shows) as to why these words / sentiments might resonate with viewers

# Content

You can include text, `code`, and output as usual. Remember to take full advantage of Markdown and its [syntax shortcuts](https://www.markdownguide.org/basic-syntax/).

```{r}
#Gilmore Girls
load(file="gg_filtered.Rdata")
load(file="gg_filtered_sentiments.Rdata")
load(file="gg_filtered_pos_neg.Rdata")
load(file="pos_neg_val_sentiment.Rdata")
#Euphoria
load(file = "euph_words.Rdata")
#South Park
load(file="sp_lines_filtered.Rdata")
load(file="sp_lines_full_ngram.Rdata")
load(file="sp_lines_filtered_pos_neg.Rdata")
load(file="sp_lines_filtered_sentiments.Rdata")
load(file="sp_characters.Rdata")
```


##Summaries of Each Show
IN EACH SECTION PUT 2-3 SENTENCES ABOUT EACH SHOW LIKE INFO ABOUT WHEN IT WAS MADE, SUMMARIES, HOW MANY SEASONS/EPISODES

###Gilmore Girls
Gilmore girls is a ____

###Euphoria
Euphoria is a ____

###South Park
South Park is a ____


## Faceting Formatting of Most Common Words

<!-- Begin columns environment -->
:::::: {style="display: flex; font-size: large;"}

<!-- Create a column -->
::: {}
### Gilmore Girls

```{r}
#| label: faceted Most Common Words in Gilmore Girls
#| fig.align: left
#| out.width: 100%
#Gilmore Girls Most Common Words Visualization - Shani

#Customizing color palette
nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(8, "Pastel1"))(nb.cols)

#plotting with palette for top 20 words by count 
#excluding stop words and keeping words without the positivity ranking
gg_filtered|>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  #fct_reorder to descending order it
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for Gilmore Girls (Excl. Stop Words)") +
  scale_fill_manual(values = mycolors) +
  theme_light()
```
:::

<!-- Create another column (this one is just adding horizontal space to separate content) -->
::: {}
<div class="horizontalgap" style="width:40px"></div>
:::

<!-- Create another column -->
::: {}

### Euphoria

```{r}
#| label: faceted Most Common Words in Euphoria
#| fig.align: left
#| out.width: 100%
euph_words |>
  #filter(char == "KAT") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said in Euphoria") +
  theme_classic()
```

:::

::: {}
<div class="horizontalgap" style="width:40px"></div>
:::

::: {}
### South Park 

```{r}
#| label: faceted Most Common Words in South Park
#| fig.align: left
#| out.width: 100%
sp_lines_filtered |>
  count(word, sort = TRUE) |>
  slice(1:35) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             color = word, 
             fill = word)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for South Park (Excl. Stop Words)")+
  theme_classic()
```

:::

::::::
<!-- End columns environment with matching length indicator-->



## Most Common Words
EXPLAIN THIS
### Gilmore Girls

```{r}
#| label: Gilmore Girls Most Common Words Visualization - Shani
#| fig.align: left
#| out.width: 100%

#Customizing color palette
nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(8, "Pastel1"))(nb.cols)

#plotting with palette for top 20 words by count 
#excluding stop words and keeping words without the positivity ranking
gg_filtered|>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  #fct_reorder to descending order it
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for Gilmore Girls (Excl. Stop Words)") +
  scale_fill_manual(values = mycolors) +
  theme_light()
```

### Euphoria
```{r}
#| label: Most Common Words in Euphoria Overall
#| fig.align: left
#| out.width: 100%

euph_words |>
  #filter(char == "KAT") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said in Euphoria")
```

### South Park
```{r}
#| label: Most Common Words and 3grams in South Park
#| fig.align: left
#| out.width: 100%

sp_lines_filtered |>
  count(word, sort = TRUE) |>
  slice(1:35) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             color = word, 
             fill = word)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for South Park (Excl. Stop Words)")


sp_lines_full_ngram |>
  count(threegram, sort = TRUE) |>
  slice(2:36) |> #NA for 1, annoying
  ggplot(aes(x = fct_reorder(threegram, n), 
             y = n, 
             color = threegram, 
             fill = threegram)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common ThreeGrams for South Park")
```

## By Top 5 Characters
EXPLAIN TOP 5 CHARACTERS

### Gilmore Girls
```{r}
#Gilmore Girls Most Common Words by Character Visualization - Shani

#finding top 5 characters
top_5_chars <- gg_filtered |>
  count(character, sort = TRUE)|>
  slice(1:5) |>
  select(character)

#making into vector
char_names <- str_to_title(top_5_chars[["character"]])

#color palette
nb.cols <- 65
mycolors <- colorRampPalette(brewer.pal(8, "Pastel1"))(nb.cols)

#plotting by character with color palette
gg_filtered|>
  filter(str_to_title(character) %in% char_names)|>
  group_by(character)|>
  count(word, sort = TRUE) |>
  slice(1:15) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = paste("Most Common Words said by the Top 5 Characters for Gilmore Girls (Excl. Stop Words)")) +
    facet_wrap(facets = ~reorder(str_to_title(character), -n), scales = "free_y") +
  scale_fill_manual(values = mycolors) +
  theme_light()
```

### Euphoria
```{r}
#| label: Most Common Words by the Top 5 Characters in Euphoria
#| fig.align: left
#| out.width: 100%

euph_words |>
  filter(char == "RUE") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Rue in Euphoria")

euph_words |>
  filter(char == "NATE") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Nate in Euphoria")

euph_words |>
  filter(char == "JULES") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Jules in Euphoria")

euph_words |>
  filter(char == "MADDY") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Maddy in Euphoria")

euph_words |>
  filter(char == "KAT") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Kat in Euphoria")
```

### South Park
Insert 

## Most Common Words by Sentiment 
EXPLAIN THIS!

###Gilmore Girls

```{r}
#| label: EXAMPLE OF SENTIMENT ANALYSIS IN GILMORE GIRLS
#| fig.align: left
#| out.width: 100%
#Gilmore Girls Filtered Most Common Words with Sentiment Visualization - Shani

#Most common words with sentiment (not NA in the dplyr package)
gg_filtered|>
  count(word, sort = TRUE) |>
  inner_join(pos_neg_val_sentiment, by = "word")|>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(value))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  #showing the legend with positive values at the top
  guides(fill = guide_legend(reverse = TRUE)) +
  labs(
    x = NULL,
    y = "Number of instances",
    fill = "Positivity rating",
    title = "Most Common Words with Sentiment for Gilmore Girls (Excl. Stop Words)") +
  scale_fill_brewer(palette = "RdYlGn") +
  theme_light()
```

### Euphoria
Insert

### South Park
Insert 

## Sentiment Analysis
EXPLAIN OUR SENTIMENT ANALYSIS

###Gilmore Girls
```{r}
#Gilmore Girls Sentiment Analysis Visualization and Value - Shani

#Customizing color palette
nb.cols <- 8
mycolors <- colorRampPalette(brewer.pal(8, "Pastel1"))(nb.cols)

#and how common the 8 different categorical sentiments are (visualization)
#one word can have more than one sentiment in the dplyr dataset
gg_filtered_sentiments|>
  filter(sentiment != "positive" & sentiment != "negative")|>
  count(sentiment, sort = TRUE) |>
  slice(1:12) |> 
  ggplot(aes(x = fct_reorder(sentiment, n), 
             y = n, 
             fill = sentiment)) +
  geom_col() +
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Sentiments in Gilmore Girls") +
  scale_fill_manual(values = mycolors) +
  theme_light()

#finding the overall sentiment of the show (score) 
cat("The mean positivity value of Gilmore Girls is", mean(gg_filtered_pos_neg$value))
```

### Euphoria
Insert

### South Park
```{r}
#| label: Sentiment Analysis for South Park
#| fig.align: left
#| out.width: 100%

sp_lines_filtered_sentiments|>
  count(sentiment, sort = TRUE) |>
  slice(1:10) |> #NA for 1, annoying
  ggplot(aes(x = fct_reorder(sentiment, n), 
             y = n, 
             color = sentiment, #maybe important... bad words red, good words green?
             fill = sentiment)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Sentiments in South Park")

mean(sp_lines_filtered_pos_neg$value)

sp_characters %>%
  kable(booktabs = TRUE, digits = 2, col.names = c(
    "Character",
    "Filtered Words",
    "Unfiltered Words",
    "% of all Filtered words",
    "% of all Unfiltered words"
  )) %>%
  kable_styling()

```



### South Park by Character

Each character is a key component

```{r}
#| label: Sentiments Based on Main Character for South Park
#| fig.align: left
#| out.width: 100%

#facet so that this visualization is smaller!!!
#also maybe using unfiltered words

sp_lines_filtered |>
  filter(Character == "Cartman") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Cartman in South Park")

sp_lines_filtered_pos_neg %>%
  filter(Character == "Cartman") %>%
  summarize(mean_cartman = mean(value))



sp_lines_filtered |>
  filter(Character == "Kenny") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Kenny in South Park")

sp_lines_filtered_pos_neg %>%
  filter(Character == "Kenny") %>%
  summarize(mean_kenny = mean(value))


sp_lines_filtered |>
  filter(Character == "Stan") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Stan in South Park")

sp_lines_filtered_pos_neg %>%
  filter(Character == "Stan") %>%
  summarize(mean_stan = mean(value))




sp_lines_filtered |>
  filter(Character == "Kyle") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by Kyle in South Park")

sp_lines_filtered_pos_neg %>%
  filter(Character == "Kyle") %>%
  summarize(mean_kyle = mean(value))



```


## All three shows (should be on the top)

All three shows for quick first analyses, and then comparative analyses


```{r}
#| label: EXAMPLE OF MOST COMMON WORDS IN THE THREE SHOWS
#| fig.align: left
#| out.width: 100%

#need to find a nice way to facet all of these 

gg_filtered |>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  # fct_reorder is used to re-order the axis (displaying the word) 
  # by values of n (the number of times that word was used)
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             color = word, 
             fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for Gilmore Girls (Excl. Stop Words)") 
 # scale_color_brewer("Diamond\nclarity")

euph_words |>
  #filter(char == "KAT") |> # to display a specific character's vocabulary
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said in Euphoria")

sp_lines_filtered |>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             color = word, 
             fill = word)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for South Park (Excl. Stop Words)")

```












Examples and additional guidance are provided below. 

Take note of the the default code chunk options in the `setup` code chunk. For example, unlike the rest of the qmd files we worked in this semester, the default code chunk option is `echo = FALSE`, so you will need to set `echo  = TRUE` for any code chunks you would like to display in the blog. You should be thoughtful and intentional about the code you choose to display. 


## Links 

You can include [links](https://www.datadreaming.org/post/r-markdown-theme-gallery/) using Markdown syntax as shown. 

You should include links to relevant sites as you write. You should additionally include a list of references as the end of your blog with full citations (and relevant links).


## Visualizations 

Visualizations, particularly interactive ones, will be well-received. That said, do not overuse visualizations. You may be better off with one complicated but well-crafted visualization as opposed to many quick-and-dirty plots. Any plots should be well-thought-out, properly labeled, informative, and visually appealing.

If you want to include dynamic visualizations or tables, you should explore your options from packages that are built from [**htmlwidgets**](https://www.htmlwidgets.org/showcase_leaflet.html). These **htmlwidgets**-based packages offer ways to build lighterweight, dynamic visualizations or tables that don't require an R server to run! A more complete list of packages is available on the linked website, but a short list includes:

* [**plotly**](https://plot.ly/r/): Interactive graphics with D3
* [**leaflet**](https://rstudio.github.io/leaflet/): Interactive maps with OpenStreetMap
* [**dygraphs**](http://rstudio.github.io/dygraphs): Interactive time series visualization
* [**visNetwork**](http://dataknowledge.github.io/visNetwork): Network graph visualization vis.js
* [**sparkline**](https://github.com/htmlwidgets/sparkline): Small inline charts
* [**threejs**](https://github.com/bwlewis/rthreejs): Interactive 3D graphics
    
You may embed a published Shiny app in your blog if useful, but be aware that there is a limited window size for embedded objects, which tends to makes the user experience of the app worse relative to a dedicated Shiny app page. Additionally, Shiny apps will go idle after a few minutes and have to be reloaded by the user, which may also affect the user experience. 

Any Shiny apps embedded in your blog should be accompanied by the link to the published Shiny app (I did this using a figure caption in the code chunk below, but you don't have to incorporate the link in this way).

```{r}
#| label: ds-salaries-app
#| out.width: "100%"

knitr::include_app("https://bebailey.shinyapps.io/data-science-salaries",
                   height = "500px")
```


## Tables

### **DT** package

The [**DT** package](https://rstudio.github.io/DT/) is great for making dynamic tables that can be displayed, searched, and filtered by the user without needing an R server or Shiny app!

Note: you should load any packages you use in the `setup` code chunk as usual. The `library()` functions are shown below just for demonstration.

```{r}
#| label: dt-example
#| message: false
#| echo: true

library(DT)
mtcars |>
  select(mpg, cyl, hp) |>
  datatable(colnames = c("MPG", "Number of cylinders", "Horsepower"),
            filter = 'top',
            options = list(pageLength = 10, autoWidth = TRUE))
```

### **kableExtra** package

You can also use [**kableExtra**](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html) for customizing HTML tables.

```{r}
#| label: kable-example
#| echo: true
#| message: false

library(kableExtra)
summary(cars) |>
  kbl(col.names = c("Speed", "Distance"), row.names = FALSE) |>
  kable_styling(bootstrap_options = "striped", full_width = FALSE) |>
  row_spec(0, bold = TRUE) |>
  column_spec(1:2, width = "1.5in") 
```


## Images

Images and gifs can be displayed using code chunks:

```{r}
#| fig.cap: '"Safe Space" by artist Kenesha Sneed'
#| out.width: 80%
#| fig.align: center

knitr::include_graphics("img/Kenesha-Sneed_safe-space.jpeg")
```


```{r}
#| fig.cap: "This is a figure caption"
#| out.width: 50%
#| fig.align: center
knitr::include_graphics("https://media.giphy.com/media/H7ZrrA9V2pd3Tehdds/giphy.gif")
```

You may also use Markdown syntax for displaying images as shown below, but code chunks offer easier customization of the image size and alignment.

![This is another figure caption](https://media.giphy.com/media/8i5IvxP9ZLgmjXN1BF/giphy.gif)

Either way, the file path can be a local path within your project directory or a URL for an image hosted online. This syntax works for PNG, PDF, JPG, and even GIF formats.


## Equations

You might include equations if part of the purpose of your blog is to explain a statistical method. There are two ways to include equations:

* Inline: $b \sim N(0, \sigma^2_b)$
* Display-style (displayed on its own line): 
$$\frac{\sigma^2_b}{\sigma^2_b + \sigma^2_e}$$

For typesetting equations appropriately, check out the [AMS-LaTeX quick reference](https://github.com/manuelemacchia/math-latex/blob/master/amsmath.pdf) or take a look at the *Symbols in math mode* section of this  [cheat sheet](https://users.dickinson.edu/~richesod/latex/latexcheatsheet.pdf)  (or do some extra Googling---there are *many* resources).



# Formatting

## Tabbed subsections {.tabset}

Each subsection below the "Tabbed subsections" section heading will appear in a tab. See R Markdown Cookbook [Section 7.6: Put content in tabs](https://bookdown.org/yihui/rmarkdown-cookbook/html-tabs.html) for additional customization options. 

### Bulleted list

You can make a bulleted list like this:

* item 1
* item 2
* item 3


### Numbered list


You can make a numbered list like this

1. First thing I want to say
2. Second thing I want to say
3. Third thing I want to say


# Customizing your blog design


As a *final* detail **only** if you have time, you can explore options for customizing the style of your blog. By default, we are using the `cosmo` theme from Bootswatch themes (see Line 7 of this file if you want to switch out themes). 


## Theme

There are 25 Bootswatch themes included with Quarto. You can change the theme easily by specifying one of these themes on Line 7: 

- default  
- cerulean  
- cosmo  
- cyborg  
- darkly  
- flatly  
- journal  
- litera  
- lumen  
- lux  
- materia  
- minty  
- morph  
- pulse  
- quartz  
- sandstone  
- simplex  
- sketchy  
- slate  
- solar  
- spacelab  
- superhero  
- united  
- vapor  
- yeti  
- zephyr

There are, I'm sure, many more similar packages with built in themes, or you can look into how to include a CSS code chunk to customize aspects of a theme.  

## Synax highlighting

You can also change the code chunk syntax highlighting option (Line 7, `highlight`): 

* `"default"`
* `"tango"`
* `"pygments"`
* `"kate"`
* `"monochrome"`
* `"espresso"`
* `"zenburn"`
* `"haddock"`
* `"textmate"` 
* `NULL` for no syntax highlighting (not recommended)

## Font size, type, and other customization

Further customization requires adding a CSS style file or code chunk or incorporating other development options. Further customization should be your lowest and final priority for the project. Ensure your content is fully prepared first.


# References

All data sources, any key R packages, and any other sources used in developing your blog should be cited in full in a list of references at the end of your blog. Your blog post should also link to these sources as they are discussed. You may choose any reference style as long as sources are fully cited (try to be consistent!).

Typically, references in R Markdown (and LaTeX) files are [incorporated with a BibTeX database](https://bookdown.org/yihui/rmarkdown-cookbook/bibliography.html) (a .bib file). You can try this approach or manually include either a numbered or alphabetized list. 

Columbia University has compiled some guidance on [how to cite data](https://guides.library.columbia.edu/datacitation). Some data sources will give you the citation information to copy and paste. Use the provided citations or citation styles in those cases.

You can list R package citations with the code `citation("packageName")` in the console and then copy (and reformat as needed) the relevant text, e.g.,
```{r}
citation("DT")
```

The following citations are based on the American Statistical Association citation style (not all of these references are used in this document).:


<!-- Textbook -->
Baumer, B. S., Kaplan, D. T., and Horton, N. J. (2021), *Modern Data Science with R* (2nd ed.), Boca Raton, FL: CRC Press.

<!-- Journal article -->
Broman, K. W. and Woo, K. H. (2018), "Data Organization in Spreadsheets," *The American Statistician*, 72:1, 2-10, doi: [10.1080/00031305.2017.1375989](https://doi.org/10.1080/00031305.2017.1375989)

<!-- Website -->
Columbia University Libraries (n.d.), "Data Citation," available at <https://guides.library.columbia.edu/datacitation>.

<!-- Journal article -->
McNamara, A. and Horton N. J. (2018) "Wrangling Categorical Data in R," *The American Statistician*, 72:1, 97-104, doi: [10.1080/00031305.2017.1356375](https://doi.org/10.1080/00031305.2017.1356375).

<!-- Dataset -->
Shah, Syed A. A. (October 2022), "Starbucks Drinks" (Version 1), *Kaggle*, available at <https://www.kaggle.com/datasets/syedasimalishah/starbucks-drinks>.

<!-- R package -->
Xie Y, Cheng J, Tan X (2022). "DT: A Wrapper of the JavaScript Library 'DataTables'," R package version 0.24, available at <https://CRAN.R-project.org/package=DT>.
  


 


