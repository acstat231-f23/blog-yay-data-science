---
title: "Sentiment Comparison Between Popular TV Shows"
author: "Shani Getz, Yvan Grinspan, Daniel Jang"
date: "12/6/2023"
format:
  html:
    theme: minty
    toc: true
---

```{r}
#| label: setup
#| include: false

# Set code chunk defaults 
# Consider adding `message = FALSE` option
knitr::opts_chunk$set(echo = FALSE) 
                      
# Set R environment options
options(knitr.kable.NA = '')

# Load packages
library(tidyverse)
library(rvest)
library(robotstxt)
library(purrr)
library(stringr)
library(dplyr)
library(tidytext)
library(RColorBrewer)
library(kableExtra)
```

# Intro

What makes a TV show popular? While that is a multifaceted question with no straightforward answer, we want to find similarities and differences between three vastly different and very successful TV shows (Gilmore Girls, Euphoria, South Park) to see what makes them so popular. To look into the "why," we have done text and sentiment analysis of the scripts of these shows and contextualized these analyses with our own interpretations as to why these words and general sentiments might resonate with viewers. Having seen these shows, we are able to confirm whether the analyses accurately depict the essence and topics of the series. First, we had to webscrape these scripts and then we cleaned up the scripts and removed the stop words. We then performed the analyses to reach a conclusion about how and why such disparate TV shows are so appealing to the general public.

```{r}
#| label: Load in RData files
#| include: false

#For everyone
load(file="pos_neg_val_sentiment.Rdata")
#Gilmore Girls
load(file="gg_filtered.Rdata")
load(file="gg_filtered_sentiments.Rdata")
load(file="gg_filtered_pos_neg.Rdata")
load(file="gg_character_data.Rdata")
#Euphoria
load(file = "euph_words.Rdata")
load(file = "euph_sentiments.Rdata")
load(file = "euph_pos_neg.Rdata")
load(file = "euph_char_data.Rdata")
#South Park
load(file="sp_lines_filtered.Rdata")
load(file="sp_lines_full_ngram.Rdata")
load(file="sp_lines_filtered_pos_neg.Rdata")
load(file="sp_lines_filtered_sentiments.Rdata")
load(file="sp_characters.Rdata")
```


## Summaries of Each Show
Here are summaries of each of the shows for context before we get into the visualizations and analyses!

### Gilmore Girls
Gilmore Girls is a feel-good drama comedy series focused on the relationship between a young single mother and her teenage daughter and their lives in a small New England town in the late 90s/early 2000s. With quirky characters in this town and complex relationships with parents and extended family, Gilmore Girls follows this unique mother-daughter duo through academic, professional, romantic, and existential ups and downs. This show has a very characteristic tone, with a lot of pop culture references and speedy, witty banter in the dialogue. The sense of community, ambition, independence, and love has left a lasting effect on millions of viewers.

### Euphoria
Euphoria is a teen drama series known for its graphic depiction of mature topics, especially sexual abuse and drug use, as well as its focus on cinematography and scoring. It follows the lives of Rue and her high-school classmates as they navigate a variety of challenges from self-confidence and sexuality issues to addiction, grief, and abuse. The show's distinct visual style targets and portrays Gen Z in a way that has significantly influenced trends in fashion, makeup, and social media.

### South Park
South Park South Park is a satirical sitcom infamous for its exploration on offensive and controversial topics. The show centers around four fourth-graders (Cartman, Kyle, Stan, Kenny) and their adventures throughout their town of South Park, CO. The story can range from being unwillingly transported to a foreign country to commentaries on American politics. 

## Webscraping
To obtain these scripts to analyze, we each individually found a website containing the episode scripts and webscraped them into a dataframe.

### Gilmore Girls
INSERT

### Euphoria
https://euphoria.fandom.com/wiki/Euphoria_Wiki

### South Park
South Park has a total of 321 episodes (excluding specials, movies, etc) that are each around 20-25 minutes long. The Fandom Wikipedia has the scripts for all these shows, so scraping each table from each of these links would get us all the lines. We created a list of links based on the episode titles (scraped from wikipedia) and then iterated through all these links to webscrape all the lines. Most of the episodes were retrieved, but through this method, there were certain episodes we were unable to get (88.1%). However, this is more than enough to get the general idea of South Park, so we continued. Then, we wrangled to get rid of stage directions and split by word. 

# Text Analysis
EXPLAIN TEXT ANALYSIS PLAN

## Most Common Words
Here are the most common words in these three shows after removing the stop words (using the dplyr stop words data set and individually selected stop words that were not included in that data set).

<!-- Begin columns environment -->
:::::: {style="display: flex; font-size: large;"}

<!-- Create a column -->
::: {}

### Gilmore Girls

```{r}
#| label: faceted Most Common Words in Gilmore Girls
#| fig.align: left
#| out.width: 100%
#Gilmore Girls Most Common Words Visualization - Shani

#Customizing color palette
nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(8, "Set3"))(nb.cols)

#plotting with palette for top 20 words by count 
#excluding stop words and keeping words without the positivity ranking
gg_filtered|>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  #fct_reorder to descending order it
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for Gilmore Girls (Excl. Stop Words)") +
  scale_fill_manual(values = mycolors) +
  theme_light()
```
:::

<!-- Create another column (this one is just adding horizontal space to separate content) -->
::: {}
<div class="horizontalgap" style="width:40px"></div>
:::

<!-- Create another column -->
::: {}

### Euphoria

```{r}
#| label: faceted Most Common Words in Euphoria
#| fig.align: left
#| out.width: 100%

nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(9, "BuPu"))(nb.cols)

euph_words |>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for Euphoria (Excl. Stop Words)") +
  scale_fill_manual(values = mycolors) +
  theme_light()
```

:::

::: {}
<div class="horizontalgap" style="width:40px"></div>
:::

::: {}
### South Park 

```{r}
#| label: faceted Most Common Words in South Park
#| fig.align: left
#| out.width: 100%

nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(6, "Set1"))(nb.cols)

sp_lines_filtered |>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n,
             fill = as.factor(n))) +
  geom_col() +
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Words for South Park (Excl. Stop Words)") +
  scale_fill_manual(values = mycolors) + 
  theme_light()
```

:::

::::::
<!-- End columns environment with matching length indicator-->


# Sentiment Analysis
To implement the sentiment analysis, we used tidy text databases called AFINN and nrc that describe how postive/negative a word is with a score from -5 to 5 and associate a number of categorical sentiments like fear, trust, joy, anticipation, and anger with the same words, respectively. There are only 2,477 words that exist in this database and it cannot take into account context and tone, revealing this analysis's limits, as well as potentially removing certain words we deemed not a stop word

## Most Common Words by Sentiment 
Instead of looking just at the most common words, we wanted to filter even more by dplyr's  sentiment package and look at the most common words that have an associated positivity value from the AFINN database. Using a color scale where green is postive and red is negative, we can reevaluate the recurring themes and topics in the shows.

<!-- Begin columns environment -->
:::::: {style="display: flex; font-size: large;"}

<!-- Create a column -->
::: {}


### Gilmore Girls

```{r}
#| label: Most common words sentiment analysis in Gilmore girls
#| fig.align: left
#| out.width: 100%
#Gilmore Girls Filtered Most Common Words with Sentiment Visualization - Shani

#Most common words with sentiment (not NA in the dplyr package)
gg_filtered|>
  count(word, sort = TRUE) |>
  inner_join(pos_neg_val_sentiment, by = "word")|>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(value))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  #showing the legend with positive values at the top
  guides(fill = guide_legend(reverse = TRUE)) +
  labs(
    x = NULL,
    y = "Number of instances",
    fill = "Positivity rating",
    title = "Most Common Positivity-rated Words in Gilmore Girls") +
  scale_fill_brewer(palette = "RdYlGn", limit = factor(-5:5)) +
  theme_light()
```
:::

<!-- Create another column (this one is just adding horizontal space to separate content) -->
::: {}
<div class="horizontalgap" style="width:40px"></div>
:::

<!-- Create another column -->
::: {}

### Euphoria
```{r}
#| label: Most common words positivity rating in Euphoria
#| fig.align: left
#| out.width: 100%

euph_words |>
  count(word, sort = TRUE) |>
  inner_join(pos_neg_val_sentiment, by = "word") |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, fill = as.factor(value))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  scale_fill_brewer(palette = "RdYlGn", limit = factor(-5:5)) +
  guides(
    color = guide_legend(reverse = TRUE), 
    fill = guide_legend(reverse = TRUE)) +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    fill = "Positivity rating",
    title = "Most Common Positivity-rated Words in Euphoria") +
  theme_light()
```

:::

::: {}
<div class="horizontalgap" style="width:40px"></div>
:::

::: {}
### South Park 


```{r}
#| label: Most common words sentiment analysis in South Park
#| fig.align: left
#| out.width: 100%

sp_lines_filtered |>
  count(word, sort = TRUE) |>
  inner_join(pos_neg_val_sentiment, by = "word") |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(value))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  scale_fill_brewer(palette = "RdYlGn", limit = factor(-5:5)) +
  guides(
    color = guide_legend(reverse = TRUE), 
    fill = guide_legend(reverse = TRUE)) +
  labs(
    x = NULL,
    y = "Number of instances",
    fill = "Positivity rating",
    title = "Most Common Positivity-rated Words in South Park") +
  theme_light()

```

:::

::::::
<!-- End columns environment with matching length indicator-->

## Positivity Scores
EXPLAIN POSITIVITY SCORES
```{r}
#| label: Positivity Score table in all the shows
#| fig.align: left
#| out.width: 100%

#make into kable table

shows <- c("Gilmore_Girls", "Euphoria", "South_Park")
values <- c(mean(gg_filtered_pos_neg$value), 
            mean(euph_pos_neg$value), 
            mean(sp_lines_filtered_pos_neg$value, na.rm = TRUE)
            )

positivty_scores <- data.frame(shows, values)

positivty_scores |>
  kable(booktabs = TRUE, digits = 3, col.names = c(
    "Show",
    "Positivity Score"
  )) |>
  kable_styling()


#finding the overall sentiment of the show (score) 
# cat("The mean positivity value of Gilmore Girls is", mean(gg_filtered_pos_neg$value))
# cat("The mean positivity value of Euphoria is", mean(euph_pos_neg$value))
# cat("The mean positivity value of South Park is", mean(sp_lines_filtered_pos_neg$value, na.rm = TRUE))

```

## Categorical Sentiment Analysis
EXPLAIN OUR categorical SENTIMENT ANALYSIS

### Gilmore Girls

```{r}
#| label: Gilmore Girls categorical Sentiment Analysis Visualization
#| fig.align: left
#| out.width: 100%

#Customizing color palette
nb.cols <- 8
mycolors <- colorRampPalette(brewer.pal(8, "Set3"))(nb.cols)

#and how common the 8 different categorical sentiments are (visualization)
#one word can have more than one sentiment in the dplyr dataset
gg_filtered_sentiments|>
  filter(sentiment != "positive" & sentiment != "negative")|>
  count(sentiment, sort = TRUE) |>
  slice(1:12) |> 
  ggplot(aes(x = fct_reorder(sentiment, n), 
             y = n, 
             fill = sentiment)) +
  geom_col() +
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Sentiments in Gilmore Girls") +
  scale_fill_manual(values = mycolors) +
  theme_light()

```

### Euphoria
```{r}
#| label: Euphoria categorical Sentiment Analysis Visualization
#| fig.align: left
#| out.width: 100%

nb.cols <- 8
mycolors <- colorRampPalette(brewer.pal(9, "BuPu"))(nb.cols)

euph_sentiments |>
  filter(sentiment != "positive" & sentiment != "negative") |>
  count(sentiment, sort = TRUE) |>
  slice(1:10) |>
  ggplot(aes(x = fct_reorder(sentiment, n), 
             y = n,
             fill = sentiment)) +
  geom_col() +
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Sentiments in Euphoria") +
  scale_fill_manual(values = mycolors) +
  theme_light()

```

### South Park
```{r}
#| label: South Park categorical Sentiment Analysis Visualization
#| fig.align: left
#| out.width: 100%
nb.cols <- 8
mycolors <- colorRampPalette(brewer.pal(6, "Set1"))(nb.cols)

sp_lines_filtered_sentiments|>
  count(sentiment, sort = TRUE) |>
  slice(4:11) |> #1 is NA, 2 and 3 are pos/neg (which aren't really indicative of anything)
  ggplot(aes(x = fct_reorder(sentiment, n), 
             y = n, #maybe important... bad words red, good words green?
             fill = sentiment)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Sentiments in South Park") +
  scale_fill_manual(values = mycolors) + 
  theme_light()

```

# Character Analysis
In each of these shows we narrowed down the characters to the top 5 (or 4) main characters that contribute the most to the dialogue or culture of the show. This shows the breakdown of the most common words seen above into the most common characters, highlighting their similarities and differences.

### Gilmore Girls

The top 5 characters in Gilmore Girls: Lorelai and Rory, the mother and daughter duo. Luke, the owner of the town diner Lorelai and Rory frequent (and Lorelai's future boyfriend/husband). Emily, Lorelai's mother and Rory's grandmother. Sookie, Lorelai's best friend, the chef at the inn that they work at/run together.
```{r}
#| label: Gilmore Girls Most Common Words by Character Visualization 
#| fig.align: left
#| out.width: 100%

#finding top 5 characters
top_5_chars <- gg_filtered |>
  count(character, sort = TRUE)|>
  slice(1:5) |>
  select(character)

#making into vector
char_names <- str_to_title(top_5_chars[["character"]])

#color palette
nb.cols <- 65
mycolors <- colorRampPalette(brewer.pal(8, "Set3"))(nb.cols)

#plotting by character with color palette
gg_filtered|>
  filter(str_to_title(character) %in% char_names)|>
  group_by(character)|>
  count(word, sort = TRUE) |>
  slice(1:15) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = paste("Most Common Words said by the Top 5 Characters for Gilmore Girls")) +
    facet_wrap(facets = ~reorder(str_to_title(character), -n), scales = "free_y") +
  scale_fill_manual(values = mycolors) +
  theme_light()

#Character filtered vs unfiltered words data table
gg_character_data |>
  kable(booktabs = TRUE, digits = 2, col.names = c(
    "Character",
    "Filtered Words",
    "Unfiltered Words",
    "% of all Filtered words",
    "% of all Unfiltered words"
  )) |>
  kable_styling()

#Positivity Scores by Character
gg_filtered_pos_neg |>
  filter(str_to_title(character) %in% char_names) |>
  group_by(str_to_title(character)) |>
  summarize(mean = mean(value, na.rm = TRUE)) |>
  kable(booktabs = TRUE, digits = 3, col.names = c(
    "Character",
    "Overall Mean of Sentiment Throughout the show"
  )) |>
  kable_styling()
```

### Euphoria

The five characters who speak the most in Euphoria are Rue, Nate, Jules, Maddy, and Kat. Rue, the main protagonist, speaks significantly more than any other character because she also often acts as a narrator. This also makes sense with the fact that her positivity score is the closest to the rating of the series as a whole. Jules is Rue's on-and-off girlfriend throughout the first season. One of the main plot lines of the season is their internal conflict as they both grapple with how their own identities fit into the relationship, as demonstrated by the appearance of "feel" in both of their lists of most frequent words. Jules has the highest positivity score of the main characters, as she is often the only source of hope and comfort for Rue during her struggle with addiction. She is also shown texting frequently, which is why "ur" and "lol" are among her most used words. Nate, on the other hand, is a misogynistic, abusive football player with severe anger issues stemming from his sexual insecurity and dysfunctional family, earning him the lowest positivity score with commonly said words like "rape," "hurt," and "motherfucker." Maddy and Kat both speak less than the three main characters, so their vocabularies seem slightly less revealing of their personalities and relationships, but Kat is the only character of the five to have the words "sex" and "cool" in her top 15 words, hinting at her issues with body positivity, self-confidence, and her relationship with sex.

```{r}
#| label: Most Common Words by the Top 5 Characters in Euphoria
#| fig.align: left
#| out.width: 100%

nb.cols <- 46
mycolors <- colorRampPalette(brewer.pal(9, "BuPu"))(nb.cols)

top_chars <- euph_words |>
  count(char, sort = TRUE) |>
  slice(1:5)

euph_words |>
  filter(char %in% top_chars$char) |>
  group_by(char) |>
  count(word, sort = TRUE) |>
  slice(1:15) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, fill = word)) +
    geom_col() +
    coord_flip() +
    # Rotate graph
    guides(fill = "none") +
    labs(
      # Remove x variable label; notice that although coordinates are flipped, 
      # the labels correspond to which variables were specified 
      # as `x` and `y` in `aes()`
      x = NULL,
      y = "Number of instances",
      title = "The most common words said by the top 5 characters in Euphoria"
    ) +
  facet_wrap(facets = ~reorder(str_to_title(char), -n), scales = "free_y") +
  scale_fill_manual(values = mycolors) +
  theme_light()

#Character filtered vs unfiltered words data table
euph_char_data |>
  mutate(char = str_to_title(char)) |>
  kable(booktabs = TRUE, digits = 2, col.names = c(
    "Character",
    "Filtered Words",
    "Unfiltered Words",
    "% of all Filtered words",
    "% of all Unfiltered words"
  )) |>
  kable_styling()

#Positivity Scores by Character
euph_pos_neg |>
  filter(char %in% top_chars$char) |>
  group_by(str_to_title(char)) |>
  summarize(mean = mean(value, na.rm = TRUE)) |>
  kable(booktabs = TRUE, digits = 3, col.names = c(
    "Character",
    "Overall Mean of Sentiment Throughout the show"
  )) |>
  kable_styling()
```

### South Park

Out of the four main boys of South Park, only one is not in the top 4 (Kenny) as he rarely speaks. However, since he is an integral character (front and center in posters), it is important to analyze what he says to better understand the show’s popularity in general. Below we see the most common words by each of the four boys. As we can see, these boys are closely knit (saying dude a lot). Cartman is the most offensive when it comes to saying specific words in context, while Kenny seems to use only interjections in his speech. Stan and Kyle are the more grounded characters, giving us a balance and a foil to the other two. 


```{r}
#| label: Sentiments Based on Main Character for South Park
#| fig.align: left
#| out.width: 100%

#followed shani's code, except since kenny doesn't talk much (still main character), it's important to get him
nb.cols <- 51 #R says it needs 51, so I edited it
mycolors_sp <- colorRampPalette(brewer.pal(8, "Set1"))(nb.cols)


sp_main_characters <- data.frame(Character  = c("Cartman", "Kenny", "Stan", "Kyle"))
sp_char_names <- str_to_title(sp_main_characters[["Character"]])

sp_lines_filtered |>
  filter(str_to_title(Character) %in% sp_char_names) |> # to display a specific character's vocabulary
  group_by(Character) |>
  count(word, sort = TRUE) |>
  slice(1:15) |>
  ggplot(aes(x = fct_reorder(word, n), 
             y = n, 
             fill = as.factor(n))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "The most common words said by the four main boys in South Park") +
  facet_wrap(facets = ~reorder(str_to_title(Character), -n), scales = "free_y") +
  scale_fill_manual(values = mycolors_sp) + 
  theme_light()
  
#Character filtered vs unfiltered words data table
sp_characters %>%
  kable(booktabs = TRUE, digits = 2, col.names = c(
    "Character",
    "Filtered Words",
    "Unfiltered Words",
    "% of all Filtered words",
    "% of all Unfiltered words"
  )) %>%
  kable_styling()

#Positivity Scores by Character
sp_lines_filtered_pos_neg %>%
  filter(str_to_title(Character) %in% sp_char_names) %>%
  group_by(Character) %>%
  summarize(mean = mean(value, na.rm = TRUE)) %>%
  kable(booktabs = TRUE, digits = 3, col.names = c(
    "Character",
    "Overall Mean of Sentiment Throughout the show"
  )) %>%
  kable_styling()

```


# Analysis and Conclusion

## Analysis
Talk specifics, values, words

## Conclusion
big takeaways, what do people like, why do they like it? where do we move from here? if we were to continue use new sentiment analysis database to get more accurate analyses/values/visualizations?

