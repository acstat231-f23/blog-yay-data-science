---
title: "yvan_euphoria_webscrape"
format: pdf
editor: visual
---

```{r}
#| label: setup
#| include: FALSE

knitr::opts_chunk$set(eval = FALSE, message = FALSE)

# improve digit and NA display 
options(scipen = 1, knitr.kable.NA = '')

# load packages
library(tidyverse)
library(rvest)
library(robotstxt)
library(purrr)
library(stringr)
library(dplyr)
library(tidytext)
```

```{r}
euph_url1 <- "https://euphoria.fandom.com/wiki/Category:Transcripts_of_Euphoria:_Season_1"
robotstxt::paths_allowed(euph_url1)

euph_url2 <- "https://euphoria.fandom.com/wiki/Category:Transcripts_of_Euphoria:_Season_2"
robotstxt::paths_allowed(euph_url2)

euph_html1 <- euph_url1 |>
  read_html()
euph_html2 <- euph_url2 |>
  read_html()
```

```{r}
ep_urls1 <- euph_html1 |>
  html_elements('.category-page__member') |>
  html_elements("a") |>
  html_attr("href") |>
  as.data.frame()
colnames(ep_urls1) = c("ep_url")

ep_urls2 <- euph_html2 |>
  html_elements('.category-page__member') |>
  html_elements("a") |>
  html_attr("href") |>
  as.data.frame()
colnames(ep_urls2) = c("ep_url")

# add main site part to urls
url_start <- "https://euphoria.fandom.com"
ep_urls1$ep_url <- paste0(url_start, ep_urls1$ep_url)
ep_urls2$ep_url <- paste0(url_start, ep_urls2$ep_url)

ep_urls <- rbind(ep_urls1, ep_urls2)
```

```{r}
# add script texts to data frame
n_iter <- 10

scripts <- ep_urls |>
  # Limit number of rows if we're not scraping all episodes
  slice(1:n_iter) |> 
  # Add currently empty column for poem text (to be filled in as we iterate)
  mutate(text = "")

for (i in seq_len(n_iter)) {
   # Scrape episode i's text and save it to row i of the `text` variable
  scripts$text[i] <- scripts$ep_url[i] |>
    read_html() |>
    html_elements(".poem") |>
    html_text2()
}

scripts_filtered <- scripts |>
  mutate(ep_num = 1:n_iter) |> # add episode number to each row
  select(text, ep_num)

euph_lines_full <- scripts_filtered |>
  filter(text != "") |>
  mutate(text = str_replace(text, "- Wait", "KAT: Wait")) |> # fixing specific format problems
  mutate(text = str_replace(text, "- Why", "JULES: Why")) |>
  mutate(text = str_replace(text, "- Yeah", "TREVOR: Yeah")) |>
  mutate(text = str_replace(text, "23 to", "ANNOUNCER 1: 23 to")) |>
  mutate(text = str_replace(text, "CASSIE ", "CASSIE: ")) |>
  mutate(text = str_replace(text, "KAT ", "KAT: ")) |>
  mutate(text = str_replace(text, "WES ", "WES: ")) |>
  mutate(text = str_replace(text, "ETHAN Hey.", "ETHAN: Hey.")) |>
  mutate(text = str_replace(text, "FEZCO [softly]", "FEZCO: [softly]")) |>
  mutate(text = str_replace(text, "I fuckin'", "RUE: I fuckin'")) |>
  mutate(text = str_replace(text, "If I could,", "\nJULES: If I could,")) |>
  mutate(text = str_replace(text, "I think he's", "ANNOUNCER 2: I think he's")) |>
  mutate(text = str_replace(text, "Then where", "LESLIE: Then where")) |>
  mutate(text = str_replace(text, "\nin the fucking morning", " in the fucking morning")) |>
  mutate(text = str_replace(text, "\nlike, all week.", " like, all week.")) |>
  mutate(text = str_replace(text, "\nof conversation", " of conversation")) |>
  mutate(text = str_replace(text, "\non his phone", " on his phone")) |>
  mutate(text = str_replace(text, "\nstupid.", " stupid.")) |>
  separate_longer_delim(cols = text, delim = "\n")


euph_words_full <- euph_lines_full |>
  separate(col = text, into = c("char", "line"), sep = ": ?", remove = TRUE) |>
  unnest_tokens(output = word, input = line)
```

```{r}
data(stop_words)

custom_stop_words <- data.frame(
  word = c("v.o", "text", "yeah", "gonna",
           "wanna", "hey", "uh", "um",
           "rue", "jules", "nate", "maddy",
           "fez", "gia", "tyler", "ethan",
           "mm"), 
  lexicon = c("custom", "custom", "custom", "custom", 
              "custom", "custom", "custom", "custom",
              "custom", "custom", "custom", "custom",
              "custom", "custom", "custom", "custom",
              "custom")
)

stop_words_full <- bind_rows(stop_words, custom_stop_words)

euph_words <- euph_words_full %>%
  anti_join(stop_words_full, by="word")

save(euph_words, file = "euph_words.Rdata")
```

```{r}
euph_words |>
  count(word, sort = TRUE) |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n)) +
  geom_col(color = "blue", fill = "lightblue") +
  # Rotate graph
  coord_flip() +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    title = "The most common words said in Euphoria")
```

```{r}
top_chars <- euph_words |>
  count(char, sort = TRUE) |>
  slice(1:5)
top_chars
```

```{r}
euph_words |>
  filter(char %in% top_chars$char) |>
  group_by(char) |>
  count(word, sort = TRUE) |>
  slice(1:10) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
    geom_col() +
    coord_flip() +
    # Rotate graph
    guides(color = "none", 
           fill = "none") +
    labs(
      # Remove x variable label; notice that although coordinates are flipped, 
      # the labels correspond to which variables were specified 
      # as `x` and `y` in `aes()`
      x = NULL,
      y = "Number of instances",
      title = "The most common words said by top 5 characters in Euphoria"
    ) +
    facet_wrap(~char, scales = "free_y")
```

```{r}
pos_neg_val_sentiment <- get_sentiments("afinn") #from tidyverse

#then mutate filtered words with the pos/neg sentiments associated with the words
euph_pos_neg <- inner_join(euph_words, pos_neg_val_sentiment, by = "word")

#now we can do something similar with descriptive sentiments (eg. hell feels angry)
word_sentiment <- get_sentiments("nrc") 
euph_sentiments <- inner_join(euph_words, word_sentiment, by="word")

save(euph_sentiments, file = "euph_sentiments.Rdata")
```

```{r}
euph_sentiments |>
  filter(sentiment != "positive" & sentiment != "negative") |>
  count(sentiment, sort = TRUE) |>
  slice(1:10) |>
  ggplot(aes(x = fct_reorder(sentiment, n), 
             y = n, 
             color = sentiment, #maybe important... bad words red, good words green?
             fill = sentiment)) +
  geom_col() +
  coord_flip() +
  guides(color = "none", 
         fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "Most Common Sentiments in Euphoria")

mean(euph_pos_neg$value)
```

```{r}
euph_words |>
  count(word, sort = TRUE) |>
  inner_join(pos_neg_val_sentiment, by = "word") |>
  slice(1:20) |>
  ggplot(aes(x = fct_reorder(word, n), y = n, fill = as.factor(value))) +
  geom_col() +
  # Rotate graph
  coord_flip() +
  scale_fill_brewer(palette = "RdYlGn") +
  guides(
    color = guide_legend(reverse = TRUE), 
    fill = guide_legend(reverse = TRUE)) +
  labs(
    # Remove x variable label; notice that although coordinates are flipped, 
    # the labels correspond to which variables were specified 
    # as `x` and `y` in `aes()`
    x = NULL,
    y = "Number of instances",
    fill = "Positivity rating",
    title = "The most common positivity-rated words said in Euphoria")
```

